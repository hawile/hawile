<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="top.hawile.mapper.JobMapper">
  <resultMap id="BaseResultMap" type="top.hawile.entity.Job">
    <id column="job_id" jdbcType="INTEGER" property="jobId" />
    <result column="job_name" jdbcType="VARCHAR" property="jobName" />
    <result column="dept_id" jdbcType="INTEGER" property="deptId" />
    <result column="remark" jdbcType="VARCHAR" property="remark" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select
      job_id, job_name, dept_id, remark, update_time
    from job
    where job_id = #{jobId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from job
    where job_id = #{jobId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="top.hawile.entity.Job">
    insert into job (job_id, job_name, dept_id, 
      remark, update_time)
    values (#{jobId,jdbcType=INTEGER}, #{jobName,jdbcType=VARCHAR}, #{deptId,jdbcType=INTEGER}, 
      #{remark,jdbcType=VARCHAR}, #{updateTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="top.hawile.entity.Job">
    insert into job
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="jobId != null">
        job_id,
      </if>
      <if test="jobName != null">
        job_name,
      </if>
      <if test="deptId != null">
        dept_id,
      </if>
      <if test="remark != null">
        remark,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="jobId != null">
        #{jobId,jdbcType=INTEGER},
      </if>
      <if test="jobName != null">
        #{jobName,jdbcType=VARCHAR},
      </if>
      <if test="deptId != null">
        #{deptId,jdbcType=INTEGER},
      </if>
      <if test="remark != null">
        #{remark,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="top.hawile.entity.Job">
    update job
    <set>
      <if test="jobName != null">
        job_name = #{jobName,jdbcType=VARCHAR},
      </if>
      <if test="deptId != null">
        dept_id = #{deptId,jdbcType=INTEGER},
      </if>
      <if test="remark != null">
        remark = #{remark,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where job_id = #{jobId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="top.hawile.entity.Job">
    update job
    set job_name = #{jobName,jdbcType=VARCHAR},
      dept_id = #{deptId,jdbcType=INTEGER},
      remark = #{remark,jdbcType=VARCHAR},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where job_id = #{jobId,jdbcType=INTEGER}
  </update>
  <select id="selectDeptId" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select job_id, job_name, dept_id, remark, update_time
    from job where dept_id = #{deptId,jdbcType=INTEGER}
  </select>
  <select id="selectAll" resultMap="BaseResultMap">
    select job_id, job_name, j.dept_id, remark, update_time, d.dept_name
    from job j left join department d on d.dept_id = j.dept_id order by j.dept_id
  </select>
</mapper>