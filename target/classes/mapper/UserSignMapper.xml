<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="top.hawile.mapper.UserSignMapper">
  <resultMap id="BaseResultMap" type="top.hawile.entity.UserSign">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="user_name" jdbcType="VARCHAR" property="userName" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="password" jdbcType="VARCHAR" property="password" />
    <result column="sex" jdbcType="VARCHAR" property="sex" />
    <result column="age" jdbcType="INTEGER" property="age" />
    <result column="job_id" jdbcType="INTEGER" property="jobId" />
    <result column="phone" jdbcType="VARCHAR" property="phone" />
    <result column="email" jdbcType="VARCHAR" property="email" />
    <result column="qq" jdbcType="VARCHAR" property="qq" />
    <result column="state" jdbcType="INTEGER" property="state" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="`cause`" jdbcType="VARCHAR" property="`cause`" />
  </resultMap>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select
      id, user_name, `name`, sex, age, job_id, phone, email,
      qq, state, create_time, `cause`
    from user_sign
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from user_sign
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="top.hawile.entity.UserSign">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into user_sign (user_name, `name`,
    sex, age, job_id, phone,
    email, qq, state, create_time, `cause`
    )
    values (#{userName,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR},
    #{sex,jdbcType=VARCHAR}, #{age,jdbcType=INTEGER}, #{jobId,jdbcType=INTEGER}, #{phone,jdbcType=VARCHAR},
    #{email,jdbcType=VARCHAR}, #{qq,jdbcType=VARCHAR}, #{state,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP},
    #{cause,jdbcType=VARCHAR}
    )
  </insert>
  <insert id="insertSelective" parameterType="top.hawile.entity.UserSign">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into user_sign
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="userName != null">
        user_name,
      </if>
      <if test="name != null">
        `name`,
      </if>
      <if test="password != null">
        `password`,
      </if>
      <if test="sex != null">
        sex,
      </if>
      <if test="age != null">
        age,
      </if>
      <if test="jobId != null">
        job_id,
      </if>
      <if test="phone != null">
        phone,
      </if>
      <if test="email != null">
        email,
      </if>
      <if test="qq != null">
        qq,
      </if>
      <if test="state != null">
        state,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="`cause` != null">
        `cause`,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="userName != null">
        #{userName,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        HEX(AES_ENCRYPT(#{password,jdbcType=VARCHAR}, 'keydom')),
      </if>
      <if test="sex != null">
        #{sex,jdbcType=VARCHAR},
      </if>
      <if test="age != null">
        #{age,jdbcType=INTEGER},
      </if>
      <if test="jobId != null">
        #{jobId,jdbcType=INTEGER},
      </if>
      <if test="phone != null">
        #{phone,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="qq != null">
        #{qq,jdbcType=VARCHAR},
      </if>
      <if test="state != null">
        #{state,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="`cause` != null">
        #{cause,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="top.hawile.entity.UserSign">
    update user_sign
    <set>
      <if test="userName != null">
        user_name = #{userName,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        `name` = #{name,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        `password` = HEX(AES_ENCRYPT(#{password,jdbcType=VARCHAR}, 'keydom')),
      </if>
      <if test="sex != null">
        sex = #{sex,jdbcType=VARCHAR},
      </if>
      <if test="age != null">
        age = #{age,jdbcType=INTEGER},
      </if>
      <if test="jobId != null">
        job_id = #{jobId,jdbcType=INTEGER},
      </if>
      <if test="phone != null">
        phone = #{phone,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="qq != null">
        qq = #{qq,jdbcType=VARCHAR},
      </if>
      <if test="state != null">
        state = #{state,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="`cause` != null">
        `cause` = #{cause,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="top.hawile.entity.UserSign">
    update user_sign
    set user_name = #{userName,jdbcType=VARCHAR},
        `name` = #{name,jdbcType=VARCHAR},
        `password` = HEX(AES_ENCRYPT(#{password,jdbcType=VARCHAR}, 'keydom')),
        sex = #{sex,jdbcType=VARCHAR},
        age = #{age,jdbcType=INTEGER},
        job_id = #{jobId,jdbcType=INTEGER},
        phone = #{phone,jdbcType=VARCHAR},
        email = #{email,jdbcType=VARCHAR},
        qq = #{qq,jdbcType=VARCHAR},
        state = #{state,jdbcType=INTEGER},
        `cause` = #{cause,jdbcType=VARCHAR},
        create_time = #{createTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="selectAll" resultMap="BaseResultMap">
    select
      id, user_name, `name`, `password`, sex, age, u.job_id, phone, email,
      qq, state, create_time, u.`cause`, j.job_name, d.dept_name, d.dept_id
    from user_sign u left join job j on u.job_id = j.job_id left join department d on j.dept_id = d.dept_id
    order by create_time desc
  </select>
  <select id="count" resultType="java.lang.Integer">
    select
      count(id)
    from user_sign where state = 0
  </select>
  <update id="copyPassword" parameterType="java.lang.String">
    update user
    set `password` = (select `password` from user_sign where user_name = #{userName,jdbcType=VARCHAR})
    where user_name = #{userName,jdbcType=VARCHAR}
  </update>
</mapper>